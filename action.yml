name: 'Push to Docker Hub'
description: 'Pushes the Docker image to Docker Hub'
inputs:
  dockerhub-username:
    description: 'Docker Hub Username'
    required: true
  dockerhub-password:
    description: 'Docker Hub Password'
    required: true
  dockerhub-repository:
    description: 'Docker Hub Repository'
    required: true
  branch-environment-map:
    description: 'Mapping of branches to environments (JSON format). Default: {"main": "prod", "development": "dev", "staging": "stg", "testing": "tst"}'
    required: false
    default: '{"main": "prod", "development": "dev", "staging": "stg", "testing": "tst"}'
  dockerfile-path:
    description: 'Path to the Dockerfile for deployment'
    required: false
    default: 'deployments/Dockerfile.deploy'

runs:
  using: 'composite'
  steps:
    - name: Set environment variables
      shell: bash
      run: |
        echo "Setting environment variables..."
        BRANCH_NAME=$(echo "${GITHUB_REF#refs/heads/}")
        echo "Determined branch name: $BRANCH_NAME"
        echo "BRANCH_NAME=$BRANCH_NAME" >> "$GITHUB_ENV"
        
        # Parse the branch-environment map input
        echo "Parsing branch-environment map input..."
        BRANCH_ENV_MAP='${{ inputs.branch-environment-map }}'
        TAG_ENVIRONMENT_DOCKER=$(echo "$BRANCH_ENV_MAP" | jq -r --arg branch "$BRANCH_NAME" '.[$branch]')
        
        # Mark error if environment is not defined in the input map
        if [[ "$TAG_ENVIRONMENT_DOCKER" == "null" || -z "$TAG_ENVIRONMENT_DOCKER" ]]; then
          echo "Error: Branch '$BRANCH_NAME' not found in branch-environment map."
          exit 1
        fi

        echo "Determined environment tag: $TAG_ENVIRONMENT_DOCKER"
        echo "TAG_ENVIRONMENT_DOCKER=$TAG_ENVIRONMENT_DOCKER" >> "$GITHUB_ENV"
        echo "Set environment variables: TAG_ENVIRONMENT_DOCKER=${TAG_ENVIRONMENT_DOCKER}, BRANCH_NAME=${BRANCH_NAME}"

    - name: Debug Environment Variables
      shell: bash
      run: |
        echo "Debugging environment variables..."
        echo "TAG_ENVIRONMENT_DOCKER=${TAG_ENVIRONMENT_DOCKER}"
        echo "BRANCH_NAME=${BRANCH_NAME}"

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ inputs.dockerhub-username }}
        password: ${{ inputs.dockerhub-password }}

    - name: Set Docker image version
      shell: bash
      run: |
        echo "Setting Docker image version..."
        DATE_UTC=$(date -u +"%Y%m%dT%H%M%SZ")
        echo "Determined date UTC: $DATE_UTC"
        echo "VERSION=${DATE_UTC}" >> "$GITHUB_ENV"
        echo "Set Docker image version to ${DATE_UTC}"

    - name: Debug Docker Version
      shell: bash
      run: |
        echo "Debugging Docker version..."
        echo "VERSION=${VERSION}"

    - name: Pull existing images
      shell: bash
      run: |
        echo "Pulling existing images from Docker Hub..."
        set -e
        if docker pull ${{ inputs.dockerhub-repository }}:${TAG_ENVIRONMENT_DOCKER}-latest; then
          echo "Existing image found. Tagging as rollback."
          docker tag ${{ inputs.dockerhub-repository }}:${TAG_ENVIRONMENT_DOCKER}-latest ${{ inputs.dockerhub-repository }}:${TAG_ENVIRONMENT_DOCKER}-rollback
          docker push ${{ inputs.dockerhub-repository }}:${TAG_ENVIRONMENT_DOCKER}-rollback
        else
          echo "No existing image to tag as rollback."
        fi

    - name: Build Docker image
      shell: bash
      run: |
        echo "Building Docker image for Docker Hub..."
        DOCKERFILE_PATH='${{ inputs.dockerfile-path }}'
        echo "Using Dockerfile path: $DOCKERFILE_PATH"
        IMAGE_NAME="${{ inputs.dockerhub-repository }}:${TAG_ENVIRONMENT_DOCKER}-${VERSION}"
        echo "IMAGE_NAME=$IMAGE_NAME" >> "$GITHUB_ENV"
        docker build -f "$DOCKERFILE_PATH" -t "$IMAGE_NAME" .
        docker tag "$IMAGE_NAME" "${{ inputs.dockerhub-repository }}:${TAG_ENVIRONMENT_DOCKER}-latest"
        echo "Built Docker image: $IMAGE_NAME and tagged as latest"

    - name: Debug Build Info
      shell: bash
      run: |
        echo "Debugging build info..."
        echo "Built image name: $IMAGE_NAME"
        docker images

    - name: Run Docker container to test
      shell: bash
      run: |
        echo "Running Docker container to test image..."
        docker run -d --name test_container $IMAGE_NAME
        echo "Container running. Listing containers..."
        docker ps -a
        docker rm -f test_container
        echo "Test container removed"

    - name: Push Docker image
      shell: bash
      run: |
        echo "Pushing Docker image to Docker Hub..."
        docker push "$IMAGE_NAME"
        echo "Pushed image: $IMAGE_NAME"
        docker push "${{ inputs.dockerhub-repository }}:${TAG_ENVIRONMENT_DOCKER}-latest"
        echo "Pushed latest tag: ${{ inputs.dockerhub-repository }}:${TAG_ENVIRONMENT_DOCKER}-latest"
        if docker images | grep -q "${{ inputs.dockerhub-repository }}:${TAG_ENVIRONMENT_DOCKER}-rollback"; then
          docker push "${{ inputs.dockerhub-repository }}:${TAG_ENVIRONMENT_DOCKER}-rollback"
          echo "Pushed rollback tag: ${{ inputs.dockerhub-repository }}:${TAG_ENVIRONMENT_DOCKER}-rollback"
        fi

    - name: Debug Info
      shell: bash
      run: |
        echo "Debugging final info..."
        echo "IMAGE_NAME=${IMAGE_NAME}"
        docker images
        echo "Login again to Docker Hub to ensure pushing"
        docker login -u ${{ inputs.dockerhub-username }} -p ${{ inputs.dockerhub-password }}
        echo "Pushing images again for verification"
        docker push $IMAGE_NAME
        docker push ${{ inputs.dockerhub-repository }}:${TAG_ENVIRONMENT_DOCKER}-latest
